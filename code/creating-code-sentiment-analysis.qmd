---
title: "Creating code for sentiment analysis"
editor: visual
---

## Creating code to run sentiment analysis via an API.

Here are some prompts that we created, follow them. It will need debugging.

First download `interview-texts-only.xlsx` from [data/interviews](/data/interviews/interview-texts-only.xlsx).

> Write a Python script for sentiment analysis of post-match manager quotes using OpenAI's GPT API. Follow these detailed specifications:
>
> #### 🎯 **Task Overview**
>
> - Classify each quote on a sentiment scale from -2 to 2, based on the **manager's tone, not the match outcome**.
>
> - The script should process an xlsx file and generate a new CSV with sentiment scores.
>
> #### 📁 **Input File**
>
> - Load `interview-texts-only.xlsx`.
>
> - Use `utf-8` encoding.
>
> - Skip malformed lines upon reading.
>
> #### 🧠 **GPT Classification Logic**
>
> - Use OpenAI's `gpt-4.1-2025-04-14` model (or any GPT-4 model that is compatible with earlier versions).
>
> - Construct a **detailed prompt** that:

## Task:

Read each text carefully and rate the overall sentiment of the manager's statements as either positive or negative.
The rating should reflect the tone expressed by the manager, not your judgment of the game.

## Rating Scale:

| **Score** | **Meaning** |
|----------|------------|
| **2** | Very Positive Sentiment (clear optimism, satisfaction, praise). |
| **1** | Slightly Positive Sentiment (generally positive, some minor reservations). |
| **0** | Neutral or Unclear Sentiment. |
| **-1** | Slightly Negative Sentiment (general disappointment, frustration). |
| **-2** | Very Negative Sentiment (clear criticism, significant disappointment). |

### Final Note:
- Use **0** if unsure or if the sentiment is mixed without a clear dominance.

>
> - Retry API calls up to 3 times if they fail, using exponential backoff (e.g., wait 1s, 2s, 4s).
>
> -
>
> - Return `None` if the response is not an integer.
>
> -
>
> #### 🔐 **API Authentication**
>
> -
>
> - Use the `openai` Python package (v1+).
>
> -
>
> - Securely load the API key from a `.env` file using the `OPENAI_API_KEY` key.
>
> -
>
> - Exit with an error if the key is missing.
>
> -
>
> #### 🧪 **Processing and Output**
>
> -
>
> - Iterate through all rows, using `tqdm` for progress.
>
> -
>
> - For each row, call the GPT model and collect results.
>
> -
>
> - Save results (`text_id`, `score`) to `manager_sentiment_results.csv`.
>
> -
>
> - Print and log a frequency table of scores at the end.
>
> -
>
> #### 🪵 **Logging**
>
> -
>
> - Use Python's `logging` module.
>
> -
>
> - Configure it to:
>
>     -
>
>     - Log to both console (`stdout`) and file `classification.log` (overwrite mode).
>
>     -
>
>     - Use format: `[timestamp] [level] [message]`
>
>     -
>
>     - Set level to `INFO`.
>
>     -
>
> -
>
> - Log key events:
>
>     -
>
>     - API call initiation
>
>     -
>
>     - API response
>
>     -
>
>     - Number of rows processed
>
>     -
>
>     - Missing columns
>
>     -
>
>     - Final score distribution
>
>     -
>
> -
>
> #### 📦 **Dependencies**
>
> -
>
> - `pandas`
>
> -
>
> - `tqdm`
>
> -
>
> - `openai`
>
> -
>
> - `dotenv`
>
> -
>
> #### 🔁 **Extras**
>
> -
>
> - Use functions for:
>
>     -
>
>     - Loading CSV,
>
>     -
>
>     - Classifying text,
>
>     -
>
>     - Error handling.
>
>     -
>
> -
>
> - Make the script directly executable with `#!/usr/bin/env python3` at the top.
>
> -

Let me know if you want me to generate the exact prompt message string or turn this section into a README section.
