---
title: "Creating graphs"
date: "2025-06-06"
---

## Example

### Task

Is there a difference in earnings of men and women? How does it vary by age?

This topic relates to the case study on [gender gap in earnings](https://gabors-data-analysis.com/casestudies/#ch09a-estimating-gender-and-age-differences-in-earnings).

### Preparation

Consider the earnings case study from the Data Analysis textbook as a case study.

-   Take a look at the info [readme](https://osf.io/cgfrq)
-   Download `morg-2014-emp.csv` from [earnings data](https://osf.io/4ay9x)
-   Download cpsx.pdf which is an [old-fashioned codebook](https://osf.io/uqe8z)
-   Read in morg-2014-emp.csv

**One state**

Let's start by filtering for the largest state.

```
1. Create a sorted frequency table of states and filter for the largest state.
```

All three code snippets were written using RStudio and GitHub Copilot. It guessed the third bit automatically.

```{{r}}

# Setup
library(tidyverse)

# Sorted frequency table of states
morg %>%
  group_by(state) %>%
  summarise(n = n()) %>%
  arrange(desc(n)) %>%
  mutate(state = fct_reorder(state, n)) %>%
  ggplot(aes(x = state, y = n)) +
  geom_col() +
  coord_flip() +
  labs(title = "Number of employees by state in Morg",
       x = "State",
       y = "Number of employees") +
  theme_minimal()

# Find the largest state in terms of number of observations

state_max=morg %>%
  group_by(state) %>%
  summarise(n = n()) %>%
  arrange(desc(n)) %>%
  slice(1) %>%
  pull(state)


# Filter morg for the largest state
morg_largest_state <- morg %>%
  filter(state == state_max)

```

Wait, what does max state=5 mean? Ask ChatGPT.

![](../../images/earnings-state5.png)

Save this file as `morg-2014-emp-state5.csv`. You can also find it in the [data section here](/data/earnings/morg-2014-emp-state5.csv).

**Get to know your file**

-   **Upload your file** and ask for a variable dictionary. After two iterations I used this:

```
Create a variable dictionary. Use the PDF I shared earlier. Output in markdown. For each variable: variable name, label, type, coverage (% missing), mean and mode. Round numbers. Look at cps for short labels. Provide a .md that I can download.

```

-   [ChatGPT](/week00/assets/variable-dictionary-chatgpt.html) created a table. Yes.
-   But look what [Claude did](/week00/assets/variable-dictionary-claude4.html). Amazing.



### Let's create a graph

**First attempt**

```
Is there a gender gap in earnings? Show me a graph.
```

ChatGPT runs data analysis -- creates a short Python script and displays the graph.

```{{python}}
import matplotlib.pyplot as plt

# Check for sex and earnings columns
if "sex" in df.columns and "earnwke" in df.columns:
    # Drop rows with missing or zero earnings
    df_filtered = df[(df["earnwke"].notna()) & (df["earnwke"] > 0)]

    # Group by sex and calculate mean earnings
    gender_earnings = df_filtered.groupby("sex")["earnwke"].mean().reset_index()
    gender_earnings["earnwke"] = gender_earnings["earnwke"].round(2)

    # Create bar plot
    plt.figure(figsize=(6, 4))
    plt.bar(gender_earnings["sex"], gender_earnings["earnwke"])
    plt.title("Average Weekly Earnings by Sex")
    plt.xlabel("Sex (1 = Male, 2 = Female)")
    plt.ylabel("Average Weekly Earnings")
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    plt.tight_layout()
    plt.show()
else:
    raise ValueError("Required 'sex' and 'earnwke' columns not found in dataset.")

```

Here is the chart:

![Graph I made](../../images/earnings-by-gender.png)
Followed by this text:
"Here's a graph showing the gender gap in weekly earnings. In this sample, males (1) earn more on average than females (2). Let me know if you'd like to adjust for hours worked or other covariates."


```
Yes, please adjust for age.
```

![Graph I made](../../images/earnings-by-gender-age1.png)

Now what? By now you should have some idea of what you want. For me, it was this:

```
Use a binscatter by year of age and fit a loess for men and women, starting at age 21.
```

Try it!

For me, it took several iterations and some tweaking to get this. Add CIs. Add footnote. Increase FN font size. Add N of obs. Change color scheme.

```{{python}}

import matplotlib.cm as cm
from matplotlib.colors import to_hex

# Get viridis colors
viridis = cm.get_cmap("viridis", 2)
color_male = to_hex(viridis(0.1))
color_female = to_hex(viridis(0.8))

# Calculate number of observations
n_obs = len(reg_data)

# Updated footnote
footnote = (
    f"Note: Residual hourly wages from a linear regression controlling for occupation (C(occ2012)) and education (C(grade92)),\n"
    f"using 2014 CPS MORG data for California (N = {n_obs}). Residuals are smoothed with LOESS (span = 0.3),\n"
    f"with 95% CI from 100 bootstrap replications. Sample restricted to individuals aged 21-80\n"
    f"with positive usual hours worked per week and earnings."
)

# Plot
plt.figure(figsize=(9, 6))

plt.plot(x_m, y_m, label="Male", color=color_male, linewidth=2)
plt.fill_between(x_m, l_m, u_m, color=color_male, alpha=0.2)

plt.plot(x_f, y_f, label="Female", color=color_female, linewidth=2)
plt.fill_between(x_f, l_f, u_f, color=color_female, alpha=0.2)

plt.axhline(0, color="black", linestyle="--", linewidth=0.8)
plt.title("Adjusted Gender Wage Gap by Age", fontsize=15)
plt.xlabel("Age", fontsize=12)
plt.ylabel("Residual Hourly Wage (USD)", fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.grid(True, linestyle="--", alpha=0.5)
plt.legend(title="Sex", labels=["Male", "Female"], fontsize=10, title_fontsize=11)

# Updated footnote with larger font
plt.figtext(0.01, -0.12, footnote, fontsize=10, ha="left", va="top")

plt.tight_layout(rect=[0, 0.12, 1, 1])
plt.savefig("/mnt/data/gender_wage_gap_viridis_residuals.png", dpi=300, bbox_inches="tight")
plt.show()

```

It took several iterations, starting with something like:

![Fourth iteration](../../images/earnings-by-gender-age2a.png)

Until I got something I liked. I made errors, forgot labels, made coding mistakes. Check out the process.

![Fourth iteration](../../images/earnings-by-gender-age4.png)

```{{python}}
import statsmodels.api as sm
from sklearn.utils import resample

# Limit and prepare data for regression
reg_data = df[
    ['age', 'earnwke', 'uhours', 'sex', 'grade92', 'occ2012']
].dropna()
reg_data = reg_data[
    (reg_data['age'] >= 21) & (reg_data['age'] <= 62) &
    (reg_data['uhours'] > 0) & (reg_data['earnwke'] > 0)
].copy()

# Calculate hourly wage
reg_data['hourly'] = reg_data['earnwke'] / reg_data['uhours']

# Residualize hourly wage on occupation and grade
X = pd.get_dummies(reg_data[['grade92', 'occ2012']].astype("category"), drop_first=True)
X = sm.add_constant(X)
model = sm.OLS(reg_data['hourly'], X).fit()
reg_data['resid'] = model.resid
reg_data['gender'] = reg_data['sex'].map({1: 'Male', 2: 'Female'})

# Define bootstrap function
def bootstrap_loess(data, gender, x_col, y_col, span=0.3, n_boot=100):
    from statsmodels.nonparametric.smoothers_lowess import lowess

    subset = data[data['gender'] == gender]
    x_vals = np.linspace(21, 80, 60)
    y_boot = np.zeros((n_boot, len(x_vals)))

    for i in range(n_boot):
        boot_sample = resample(subset)
        smoothed = lowess(boot_sample[y_col], boot_sample[x_col], frac=span, return_sorted=True)
        y_interp = np.interp(x_vals, smoothed[:, 0], smoothed[:, 1])
        y_boot[i, :] = y_interp

    y_mean = y_boot.mean(axis=0)
    y_low = np.percentile(y_boot, 2.5, axis=0)
    y_high = np.percentile(y_boot, 97.5, axis=0)
    return x_vals, y_mean, y_low, y_high

# Run bootstrap LOESS for both genders
x_m, y_m, l_m, u_m = bootstrap_loess(reg_data, 'Male', 'age', 'resid')
x_f, y_f, l_f, u_f = bootstrap_loess(reg_data, 'Female', 'age', 'resid')

# Colors and footnote
import matplotlib.cm as cm
from matplotlib.colors import to_hex

viridis = cm.get_cmap("viridis", 2)
color_male = to_hex(viridis(0.1))
color_female = to_hex(viridis(0.8))

n_obs = len(reg_data)
footnote = (
    f"Note: Residual hourly wages from a linear regression controlling for occupation (C(occ2012)) and education (C(grade92)),\n"
    f"using 2014 CPS MORG data for California (N = {n_obs}). Residuals are smoothed with LOESS (span = 0.3),\n"
    f"with 95% CI from 100 bootstrap replications. Sample restricted to individuals aged 21-80\n"
    f"with positive usual hours worked per week and earnings."
)

# Plot
plt.figure(figsize=(9, 6))
plt.plot(x_m, y_m, label="Male", color=color_male, linewidth=2)
plt.fill_between(x_m, l_m, u_m, color=color_male, alpha=0.2)
plt.plot(x_f, y_f, label="Female", color=color_female, linewidth=2)
plt.fill_between(x_f, l_f, u_f, color=color_female, alpha=0.2)

plt.axhline(0, color="black", linestyle="--", linewidth=0.8)
plt.title("Adjusted Gender Wage Gap by Age", fontsize=15)
plt.xlabel("Age", fontsize=12)
plt.ylabel("Residual Hourly Wage (USD)", fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.grid(True, linestyle="--", alpha=0.5)
plt.legend(title="Sex", labels=["Male", "Female"], fontsize=10, title_fontsize=11)
plt.figtext(0.01, -0.12, footnote, fontsize=10, ha="left", va="top")
plt.tight_layout(rect=[0, 0.12, 1, 1])
plt.savefig("/mnt/data/gender_wage_gap_viridis_residuals.png", dpi=300, bbox_inches="tight")
plt.show()

```


**Final thoughts**

* AI is great, but it took several iterations to get **what I want**, not just something.

* Oh, and we can go further. Think about this graph -- is it okay, econometrically?

### Heatmap

```
 Now show me a heatmap of hourly wages by occupation and education level. Keep viridis.
 ```

Not great.

```
Create some distinct categories of occupation.
Then create bins for education.
```

Almost there.

```
Swap colors
```

Now we are talking:

![Fourth iteration](../../images/earnings-heatmap.png)

### Other ideas

Many other options. Two extreme examples:

*   Describe age. With a graph. (Hint: think about bin size)
*   Create an interesting and well-crafted scatterplot (turn on o3 or use Claude Sonnet).

## Now with Claude

```
Show me an interesting scatterplot. Make it well-crafted.
```

**The Education-Earnings Gradient**

```{=html}
<iframe src="cps-earnings-plot.html" width="100%" height="800" frameborder="0"></iframe>
```

## Key Findings

This visualization reveals several important patterns in the 2014 labor market:

1.  **Clear Education Gradient**: Higher education levels are consistently associated with higher earnings.
2.  **Hours Worked Variation**: Higher educated workers tend to work slightly more hours.
3.  **Within-Group Variation**: Significant earnings variation exists within each education category.
4.  **Age Effect**: Within education levels, older workers (larger circles) often earn more.

::: {.callout-note}
The college earnings premium shown here (47%) aligns with established labor economics research on returns to education.
:::



Not perfect, but amazing.

## Points for Discussion

For each iteration, think about this:

*   Is the code correct?
*   What do you like and dislike about this graph? Look at all aspects carefully. How would you change it?
*   Go through the process and make each graph presentation quality.

### Bonus

You made it to the end. Bonus track is [California Love](https://www.youtube.com/watch?v=omfz62qu_Bc).
